from rich.console import Console
from rich.layout import Layout
from rich.panel import Panel
from rich.table import Table
from rich.live import Live
from rich.text import Text
from typing import Dict, Any
import time
from datetime import datetime


class AgentDashboard:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç—ã –ò–ò-–∞–≥–µ–Ω—Ç–∞"""
    
    def __init__(self):
        self.console = Console()
        self.layout = Layout()
        self.stats = {
            "total_requests": 0,
            "successful": 0,
            "errors": 0,
            "avg_response_time": 0,
            "last_request": None
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ layout
        self.layout.split(
            Layout(name="header", size=3),
            Layout(name="main", ratio=1),
            Layout(name="footer", size=7)
        )
        
        self.layout["main"].split_row(
            Layout(name="requests", ratio=2),
            Layout(name="logs", ratio=3)
        )
        
    def update_stats(self, success: bool, exec_time: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.stats["total_requests"] += 1
        if success:
            self.stats["successful"] += 1
        else:
            self.stats["errors"] += 1
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        prev_avg = self.stats["avg_response_time"]
        new_count = self.stats["successful"] + self.stats["errors"]
        self.stats["avg_response_time"] = (
            (prev_avg * (new_count - 1) + exec_time) / new_count
        )
        
        self.stats["last_request"] = datetime.now().strftime("%H:%M:%S")
    
    def generate_layout(self) -> Layout:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ layout"""
        # Header
        title = Text("ü§ñ –ò–ò-–ê–≥–µ–Ω—Ç –î–∞—à–±–æ—Ä–¥", style="bold blue")
        self.layout["header"].update(
            Panel(title, subtitle="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        )
        
        # Requests panel
        requests_table = Table(title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤")
        requests_table.add_column("–ú–µ—Ç—Ä–∏–∫–∞")
        requests_table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", justify="right")
        
        requests_table.add_row("–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤", str(self.stats["total_requests"]))
        requests_table.add_row("–£—Å–ø–µ—à–Ω—ã—Ö", f"[green]{self.stats['successful']}[/green]")
        requests_table.add_row("–û—à–∏–±–æ–∫", f"[red]{self.stats['errors']}[/red]")
        requests_table.add_row("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è", f"{self.stats['avg_response_time']:.2f} —Å–µ–∫")
        requests_table.add_row("–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å", self.stats["last_request"] or "N/A")
        
        self.layout["requests"].update(Panel(requests_table))
        
        # Logs panel
        logs = Text("\n".join([
            f"[{datetime.now().strftime('%H:%M:%S')}] –ü—Ä–∏–º–µ—Ä –ª–æ–≥–∞ 1",
            f"[{datetime.now().strftime('%H:%M:%S')}] –ü—Ä–∏–º–µ—Ä –ª–æ–≥–∞ 2",
            f"[{datetime.now().strftime('%H:%M:%S')}] –ü—Ä–∏–º–µ—Ä –ª–æ–≥–∞ 3"
        ]))
        
        self.layout["logs"].update(Panel(logs, title="–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏"))
        
        # Footer
        footer_text = Text("üîÑ –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ | Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞")
        self.layout["footer"].update(Panel(footer_text))
        
        return self.layout
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞"""
        with Live(self.layout, refresh_per_second=4) as live:
            try:
                while True:
                    live.update(self.generate_layout())
                    time.sleep(0.25)
            except KeyboardInterrupt:
                self.console.print("[yellow]–î–∞—à–±–æ—Ä–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω[/yellow]")


if __name__ == "__main__":
    dashboard = AgentDashboard()
    dashboard.start()